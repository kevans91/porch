--
-- Copyright (c) 2025 Kyle Evans <kevans@FreeBSD.org>
--
-- SPDX-License-Identifier: BSD-2-Clause
--

spawn("echo_prompt.sh")

match ">>"
write "Test Line\r"
match "Test Line"

match ">>"
signal(signals.SIGINT)
match "Interrupt"

write "Test Line\r"
match "Test"

match ">>"
signal(signals.SIGINT)
match "Interrupt"

write "Test Line\r"
match "Test"

match ">>"
signal(signals.SIGINT)
match "Interrupt"

-- This isn't necessary on all platforms.  Two different behaviors have been
-- observed when /bin/sh receives the trapped SIGINT during a `read`:  resume
-- execution after the read, and replaying the read.  For implementations that
-- do the latter, we need one more write to trigger the script to continue
-- and re-evaluate the condition to exit.  We don't try to match() on this one,
-- though, because the former implementations will most likely have advanced
-- past the post-prompt echo already.
write "Test Line\r"

local invoked = 0

eof(nil, function(status)
	local exit_code = assert(status:status())

	assert(status:is_exited(), "Expected process exit reflected in wait status")
	assert(exit_code == 37,
	    "Expected exit status of 37, got " .. exit_code)
	invoked = invoked + 1
end)

enqueue(function()
	assert(invoked == 1,
	    "Expected eof() callback to be invoked once here, not " .. invoked ..
	    " time(s)")
end)

spawn("echo_prompt.sh")

match ">>"
write "Test Line\r"
match "Test Line"

signal(signals.SIGKILL)
eof(nil, function(status)
	local signo = assert(status:status())

	assert(status:is_signaled(), "Expected process signal reflected in wait status")
	assert(signo == signals.SIGKILL,
	    "Expected signal " .. signals.SIGKILL .. ", got " .. signo)
	invoked = invoked + 1
end)

enqueue(function()
	assert(invoked == 2,
	    "Expected eof() callback to be invoked twice here, not " .. invoked ..
	    " time(s)")
end)
