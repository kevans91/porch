.\"
.\" Copyright (c) 2024, 2025 Kyle Evans <kevans@FreeBSD.org>
.\"
.\" SPDX-License-Identifier: BSD-2-Clause
.\"
.Dd June 4, 2025
.Dt ORCH 5
.Os
.Sh NAME
.Nm orch
.Nd orchestration script file format
.Sh DESCRIPTION
The
.Xr porch 1
program spawns other command-line utilities and drives them via a
.Xr pts 4 ,
using scripts referred to as
.Nm
scripts.
.Sh SCRIPT FILES
.Nm
script files are written in Lua with a limited environment available.
Notably, absolutely none of the standard environment is included.
.Nm
scripts are built around constructing
.Fn match
blocks, sometimes in conjunction with multiplexing
.Fn one
blocks.
.Pp
.Fn match
blocks in the same context are executed in the specified order.
When a match is successful, the beginning of the program output buffer is
trimmed up to the character just after the successful match.
Future
.Fn match
blocks are left with the trimmed output buffer to match against.
The default timeout for a match to succeed is 10 seconds, and may be changed
by specifying a
.Ar timeout
parameter in the match configuration.
The timeout may also be changed globally for future match blocks with the
.Fn timeout
function described below.
.Fn match
blocks may also have a
.Ar callback
specified, which itself may contain any number of
.Fn match
or
.Fn one
blocks.
.Pp
.Nm
imports only some parts of the Lua standard library for use in the
.Ar scriptfile ,
to minimize the chance of being able to conduct actions that are inherently
incompatible with the queuing model that scripts are executed with.
Currently, only the
.Fn assert
and
.Fn type
functions, and the
.Dq string
and
.Dq table
modules are exposed.
.Pp
The following functions exist for usage within the
.Ar scriptfile :
.Bl -tag -width indent
.It Fn cfg "cfg"
Set configuration for the current process using the
.Fa cfg
table.
The specified
.Fa cfg
is merged into the current configuration.
Currently, the only recognized configuration items are those described for the
.Fn write
function.
.It Fn chdir
Change the directory of the program most recently spawned.
This must be called after
.Fn spawn
and before the process is releeased.
There is currently no way to persistly
.Xr chdir 2
for every spawned process.
.It Fn clearenv "local"
Clear the environment.
If
.Fa local
is truthy, then the environment is only cleared for the most recent
.Fn spawn .
.It Fn debug "string"
Writes
.Fa string
out to the stderr of
.Nm ,
with
.Dq DEBUG:
prepended and a newline appended to it.
.Pp
This directive is enqueued, not processed immediately unless it is called from
within a failure handler.
.It Fn enqueue "function"
Add
.Fa function
to the queue to be executed in script order.
If
.Fn enqueue
is used in a context that does not execute the queue, such as from another
enqueued callback or from a failure context, then it will immediately call the
function instead of enqueueing it.
.It Fn eof "timeout" "termfn"
Check for EOF from the process.
If the process has closed its side because it was killed by signal, then
.Nm
will crash with an assertion unless it was terminated by a signal that was sent
by the user with the
.Fn signal
function.
If
.Fa timeout
is not specified, the default timeout will be used.
The
.Fa timeout
is applied both to waiting for an actual EOF, and an additional wait for the
process to have terminated.
.Pp
The
.Fa termfn
callback will be invoked if the process was terminated, with a wait status
object as the only argument to the callback.
This wait status object has the following methods:
.Bl -tag -width indent
.It Fn is_exited
Returns a boolean indicating whether the process exited or not.
.It Fn is_signaled
Returns a boolean indicating whether the process was signaled or not.
.It Fn is_stopped
Returns a boolean indicating whether the process was stopped or not.
.It Fn status
Returns the exit code or signal that resulted in termination or stopping.
.It Fn raw_status
Returns the raw
.Xr wait 2
status code.
.El
.Pp
This directive is enqueued, not processed immediately.
.It Fn exec "commandstr" "collectfn" "termfn"
Execute
.Fa commandstr
without piping its output to a spawned command.
Note that, unlike other actions that take commands, the
.Fn exec
action will only take the command as a string or a table that can be coerced
into a command string.
The result will be passed directly to
.Fn io.popen .
.Pp
The output can be collected by specifying a
.Fa collectfn
that takes a line and will be called for every line until we reach EOF.
If a
.Fa collectfn
is not specified, then the output will be discarded.
The
.Fa termfn
will be called whether the output is collected or not, and it will be passed a
wait status object as described above by the
.Fn eof
function.
.Pp
This directive is enqueued, not processed immediately.
.It Fn exit "status"
Exit with the designed
.Fa status
code.
.Pp
This directive is enqueued, not processed immediately unless it is called from
within a failure handler.
.It Fn fail "function"
Sets up a failure handler.
Pass
.Li nil
to reset the failure handler.
The
.Fa function
will receive one argument, the contents of the buffer, to aide in debugging.
By default,
.Nm
will exit with a status of 1 when a match block fails.
The failure handler prevents the default exit, but may itself call
.Fn exit .
The return value is ignored.
.Pp
This directive is enqueued, not processed immediately.
The
.Fn fail
function is not available as a direct child of a
.Fn one
block.
.It Fn flush "timeout"
Flushes all output received within
.Fa timeout
seconds.
If
.Fa timeout
is 0 or unspecified, waits indefinitely for EOF from the process.
.Pp
This directive is enqueued, not processed immediately.
.It Fn getenv "key"
Get the value of
.Fa key
from the current environment.
.Pp
This directive is always processed immediately and may not be used in a queued
context.
.Fn getenv
is expected to mostly be used for debugging purposes.
.It Fn hexdump "string"
Writes an
.Xr hd 1
style hexdump output to stderr of the input
.Fa string .
.Pp
This directive is always processed immediately, and is intended to be used
within a failure context to aide in analysis of why a match failed.
.It Fn log "logfile"
Sets a logfile for subsequent input and output to the process.
The
.Fa logfile
may be a string specifying a filename or an open file (for lib users).
If a filename is specified, then
.Nm
will open it in write-append mode and preserve existing contents.
.It Fn matcher "type"
Changes the default matcher for subsequent match blocks to the type described
by
.Fa type .
The default
.Fa type
is the
.Dq lua
matcher, which interprets match patterns as lua patterns and executes them
accordingly.
Note that Lua string processing still applies for every pattern matcher.
e.g.,
.Dq \er
will be interpreted as a carriage return for these non-default pattern matchers.
.Pp
The following matcher options are available:
.Bl -tag -width indent
.It Dq lua
Uses Lua pattern matching to match patterns.
.It Dq plain
Treats the pattern as a plain old string; no characters are special.
.It Dq posix
Treats the pattern as a POSIX extended regular expression.
See
.Xr re_format 7
for more details.
.It Dq default
An alias for the
.Dq lua
matcher.
.El
.It Fn pipe "commandstr" "linefilter"
Execute the command in
.Fa commandstr
and pipe any output from it into the spawned process.
Note that, unlike other actions that take commands, the
.Fn pipe
action will only take the command as a string or a table that can be coerced
into a command string.
The result will be passed directly to
.Fn io.popen .
.Pp
If a
.Fa linefilter
callback is passed, then every line from the given command will be ran through
it and the result of the call written to the process instead.
If the callback returns nil, then the line is skipped.
.It Fn raw "boolean"
Changes the raw
.Fn write
state on the process.
.It Fn release
Releases a spawned process for execution.
This is done implicitly when a
.Fn match
block is first encountered.
.Pp
This directive is enqueued, not processed immediately.
.It Fn setenv "key" "value" "local" , Fn setenv "table" "local"
Set the environment variable
.Fa key
to
.Va value
in the environment.
If
.Fa local
is truthy, then the value is only set for the most recent
.Fn spawn .
The
.Fa table
variant may be used to set multiple environment variables at once.
.It Fn sigblock "signo" "..."
Block all signal
.Fa signo
specified.
Each
.Fa signo
may either be a signal number or a table with signal numbers as values.
.Pp
This directive is enqueued, not processed immediately.
.It Fn sigcatch "signo" "..."
Catch all signal
.Fa signo
specified.
Each
.Fa signo
may either be a signal number or a table with signal numbers as values.
.Pp
This directive is enqueued, not processed immediately.
.It Fn sigclear
Clear the signal mask.
.Pp
This directive is enqueued, not processed immediately.
.It Fn sigignore "signo" "..."
Ignore all signal
.Fa signo
specified.
Each
.Fa signo
may either be a signal number or a table with signal numbers as values.
.Pp
This directive is enqueued, not processed immediately.
.It Fn sigreset "preserve_sigmask"
Resets all signals to be caught and clears the signal mask, unless
.Fa preserve_sigmask
is truthy.
.Pp
This directive is enqueued, not processed immediately.
.It Fn sigunblock "signo" "..."
Unblock all signal
.Fa signo
specified.
Each
.Fa signo
may either be a signal number or a table with signal numbers as values.
.Pp
This directive is enqueued, not processed immediately.
.It Fn size "width" "height"
Set or get the size of the terminal associated with the process.
If at least one of
.Fa width
or
.Fa height
are not nil, then
.Fn size
will resize that dimension of the window.
The new current size of the window is always returned.
.Pp
The window will start off on a fresh spawn with a width and height of 0.
The size of the window is never persisted across processes.
.Pp
This directive is always processed immediately, and thus should always be used
in either an
.Fn enqueue
or
fail context.
.It Fn signal "signal"
Send the specified
.Fa signal
to the current process.
The process must have already been released, either implicitly or by explicit
.Fn release ,
prior to sending a signal.
It is recommended to match at least one known output from the process before
sending a signal.
.Pp
Signal names known on the current platform are exposed in the
.Va signals
table.
The keys of this table are signal names with a
.Dq SIG
prefix.
Signals not described in this table are also accepted.
.Nm
relies on
.Xr kill 2
to validate the signal for maximum flexibility.
.It Fn sleep "duration"
Sleeps for at least the specified
.Fa duration ,
in seconds.
Fractional seconds are supported.
As implemented,
.Nm
may delay execution for a little longer than the specified
.Fa duration ,
but not for any less time.
.Pp
This directive is enqueued, not processed immediately unless it is called from
within a failure handler.
.It Fn spawn "..."
Spawns a new process.
The arguments to
.Fn spawn
are in the traditional argv style.
They may either be specified directly as arguments to the function, or they may
instead be constructed as a single table.
.Nm
will execute a standard
.Ev PATH
search via
.Xr execvp 3 .
Note that the script's directory is added to
.Ev PATH
before execution begins.
The spawned process will inherit the running environment.
.Pp
If the process cannot be spawned, then
.Nm
will exit.
Note that only one process at a time may be matched against.
If a new process is spawned, then the previous process will be killed and
subsequent matches will be against the new process.
.Pp
This directive is enqueued, not processed immediately.
.It Fn stty "field" "set" "unset"
Change the specified
.Fa field
as described by
.Fa set
and
.Fa unset .
.Fa field
should be one of
.Dq cflag ,
.Dq iflag ,
.Dq lflag ,
.Dq oflag ,
or
.Dq cc ,
corresponding to the similarly named fields in
.Xr termios 4 .
For the flag fields, the bits in
.Fa set
will be set in the new mask, and the bits in
.Fa unset
will be unset in the new mask.
Either may be 0 or nil to indicate no bits to be set or unset respectively.
The masks for each field may be found in the
.Dq tty
table in the script's global environment.
For instance, ICANON's mask may be referenced as
.Dq tty.lflag.ICANON .
.Pp
For
.Dq cc ,
the
.Fa unset
argument is ignored, and
.Fa set
should be a table whose keys correspond to a defined
.Dq V*
constant, and whose values are either the empty string to indicate that the
field should be disabled, an integer for VMIN and VTIME, or a string of the form
.Dq ^X
to indicate ctrl-X.
.Pp
Supported entries may be found in the
.Dq tty
table in the script's global environment.
The
.Dq tty.cc
table's keys correspond to supported characters, e.g.,
.Dq tty.cc.VEOF ,
and the associated values are all truthy to indicate that they are supported.
.Pp
This directive is enqueued, not processed immediately.
.It Fn timeout "val"
Adjust the default timeout to
.Fa val
seconds for subsequent
.Fn match
blocks.
The default timeout at script start is 10 seconds.
.Pp
This directive is processed immediately.
.It Fn write "str" "cfg"
Write
.Fa str
to stdin of the spawned process.
If the process is in
.Fn raw
mode, then
.Fn write
will write the entire
.Fn str
out as given.
If the process is not in
.Fn raw
mode, which is the default, then escape sequences and control characters will be
processed.
Note that lua strings are naturally escape-processed in addition to any escaping
done by
.Nm .
For example, if one wants to send a literal
.Dq "^D"
in non-raw mode, then
.Dq "\e\e^D"
is the correct sequence to do so.
The first backslash escapes the second backslash, then
.Nm
sees just a single backslash preceding the circumflex.
.Pp
This directive is enqueued, not processed immediately.
Execution does not continue to the next command until the
.Fa str
has been completely written.
.Pp
The
.Fa cfg
argument is a table of configuration items for the current send.
The following elements are supported:
.Bl -tag -width indent
.It Va rate
The rate at which to send
.Fa str .
This is specified as a table with, at a minimum, a
.Va bytes
item to describe how many bytes to send in a single batch.
.Nm
also accepts a
.Va delay
item to describe how long to wait in between each batch, in seconds.
As with the
.Fn sleep
function, fractional seconds are supported.
With a
.Va delay
of 0,
.Nm
will still call into
.Fn sleep
with no delay.
With no
.Va delay ,
.Nm
will send each batch with no delay in between them.
.El
.El
.Sh BLOCK PRIMITIVES
.Ss Match Blocks
The
.Dq match
blocks are the core primitive of
.Nm
scripts.
Setting them up sounds complicated, but some Lua-supplied sugar actually makes
construction of
.Fn match
blocks relatively elegant.
More on this will be demonstrated in the
.Sx EXAMPLES
section.
.Pp
The
.Fn match
function takes exactly one argument: a pattern to match against.
These patterns are Lua patterns, used without modification to check the output
buffer.
The
.Fn match
returns an anonymous function that may be called again with a table to describe
the properties of the
.Fn match
block.
.Pp
The following properties are available:
.Bl -tag -width indent
.It Va callback
Specifies a function to call if the match succeeds.
The
.Va callback
function may itself construct additional
.Dq match /
.Dq any
blocks, that will then be used for output matching before proceeding after the
successfully matched
.Fn match
block.
.It Va timeout
Overrides the current global timeout.
The
.Va timeout
value is measured in seconds.
.El
.Ss One Blocks
Constructing a
.Dq one
block is as simple as calling
.Fn one .
The
.Fn one
function takes a callback as its argument, and this function should setup two or
more
.Fn match
blocks to multiplex between.
The first matching pattern, as specified in script order, will be used and the
rest of the block discarded.
The usual rules of
.Fn match
blocks apply at this point; the callback will be executed, and the callback may
also do further matching.
.Pp
Note that
.Va timeout
likely does work in a
.Fn one
block as you might expect.
.Nm
will effectively wait the full length of the longest timeout for any of the
.Fn match
blocks that it contains.
If some blocks have shorter timeouts than others, then
.Nm
will timeout after the shortest timeout it sees in the block at the time.
If the shorter timeout block still does not match, it will be removed from
consideration and we will wait up until the next shortest timeout would have
expired.
That is, a match will not be granted if the matching output comes in after the
timeout would have elapsed, even if we are still waiting on input for other
blocks.
.Sh EXAMPLES
This listing demonstrates the basic features:
.Bd -literal -offset indent
-- Literally spawns a new command: "Hello there", that we will be examining.
spawn("echo", "Hello there")

-- Sets a new default for subsequent match blocks
timeout(3)

-- Just matches the initial "Hello", output buffer now contains " there" to
-- match against.
match "Hello"

-- You are also welcome to do this, if it feels more natural to you:
match("t")

-- This is effectively ignored since the only match block after it specifies an
-- explicit timeout.  If we had another match block after that one, though, then
-- it would use a one second timeout by default.
timeout(1)

-- This one will fail to match, but we have configured a higher timeout than the
-- global timeout we configured above (one second).
match "Friend" {
	timeout = 5,
}
.Ed
.Pp
This block demonstrates bidirectional communication:
.Bd -literal -offset indent
spawn("cat")

-- The tty we setup is in canonical mode by default, so the trailing \\r is
-- necessary for the spawned process to read it (unless the process turns off
-- canonical mode).
write "Hello there\\r"

match "Hello" {
	callback = function()
		debug("Hello matched")
	end
}
.Ed
.Pp
This block demonstrates more complex nested match blocks:
.Bd -literal -offset indent
spawn("cat")

write "Hello world\\r"

match "Hello" {
	callback = function()
		-- This will match the world sent above...
		match "world" {
			callback = function()
				-- ... and additionally write "FRIENDS" out
				write "FRIENDS\\r"
			end
		}
	end
}

match "FRIENDS" {
	callback = function()
		debug "FRIENDS seen!"
	end
}
.Ed
.Pp
This block demonstrates one blocks:
.Bd -literal -offset indent
spawn("cat")

write "One\\r"

-- These might feel a little bit awkward
one(function()
	-- This match block will end up used because it is specified first.
	match "ne" {
		callback = function()
			debug("This one will be called.")

			-- Script execution continues after the one() block that contains
			-- this match.

			write "One\\r"
		end
	}

	-- This match block will effectively be thrown away.
	match "One" {
		callback = function()
			debug("This one will not be called")
		end
	}
end)

-- This one will match, because the "ne" block's callback wrote it out.
match "One"
.Ed
.Pp
More examples can be found in
.Pa /usr/share/porch/examples .
.Sh SEE ALSO
.Xr porch 1 ,
.Xr pts 4 ,
.Xr termios 4
